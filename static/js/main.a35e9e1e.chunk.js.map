{"version":3,"sources":["data/polyominos.js","components/board/square.component.js","components/board/board.component.js","components/brush-controls/polyomino-preview/polyomino-preview-square.js","components/brush-controls/polyomino-preview/polyomino-preview.component.js","components/brush-controls/polyomino-selector/selectable-polyomino.js","components/brush-controls/polyomino-selector/polyomino-selector.js","components/brush-controls/colorpicker/primary-colorpicker.component.js","components/brush-controls/random-polyomino/random-polyomino.component.js","components/brush-controls/brush-controls.component.js","components/image-preview/canvas/canvas.component.js","components/image-preview/my-image/my-image.component.js","components/image-preview/image-preview.component.js","components/workspace.component.js","App.js","serviceWorker.js","index.js"],"names":["polyominos","name","data","BoardSquare","styled","td","props","assignedColor","width","height","currentColor","Square","getCursor","bind","this","cursor","className","isBeingChecked","onMouseEnter","onSetCurrentCenter","row","col","onMouseUp","mouseIsUp","onMouseDown","mouseIsDown","Component","Grid","table","CanvasControls","div","Redo","MdRedo","Undo","MdUndo","BoardWrapper","Board","state","currentComputedPolyo","isMouseDown","setCurrentCenter","increaseGrid","decreaseGrid","undoCanvas","redoCanvas","clearCanvas","boardX","onBoardSizeChange","boardY","onUndoCanvas","onRedoCanvas","onCanvasChange","newPolyo","computePolyoCoords","setState","assignColorToSquares","currentPrimaryColor","polyo","canvas","Object","assign","map","item","squareKey","onPrimaryColorChange","onToggleColorSelector","newColor","isColorSelectorOn","getColorFromSquare","isEraserOn","eraseSquares","isFillOn","newCanvas","fillSquares","square","oldColor","key","Math","min","max","currentPolyo","value","rowColKey","stringifiedCoords","JSON","stringify","some","getSquareAssignment","squareWidth","squareHeight","isSquareBeingChecked","Array","_","column","renderSquare","style","userSelect","data-tip","onClick","size","matIconSize","Button","variant","onMouseLeave","resetCurrentPolyo","getGridWidth","display","renderRow","PreviewSquare","isAssigned","PolyominoPreviewSquare","isCenter","onPolyominoUpdate","BoardGrid","PolyominoPreview","isArray","find","foundNum","element","push","splice","onPolyoChange","isSquareInCurrentPolyo","isSquareCenter","toggleSquareInCurrentPolyo","SelectablePolyominoBlock","PolyominoGrid","isCurrent","SelectablePolyomino","polyomino","setCurrentPolyomino","SelectorDiv","PolyominoSelector","currentUserPolyoId","onUserPolyoChange","selectablePolyos","getIsSelected","StyledPicker","SliderPicker","PrimaryPicker","color","handleChangeComplete","handleColorChange","event","hex","onColorChange","onChange","onChangeComplete","RandomPolyomino","setRandomPolyomino","random","floor","length","RotateLeft","MdRotateLeft","RotateRight","MdRotateRight","ColorSelect","MdColorize","Eraser","FaEraser","Fill","CgColorBucket","FlipX","MdFlip","FlipY","PolyominoSelectorContainer","PolyominoCanvasControls","PolyominoMovementControls","Controls","BrushControls","rotateLeft","rotateRight","flipX","flipY","undoPolyo","redoPolyo","clearPolyomino","getColorSelectColor","getEraserColor","position","onUndoPolyo","onRedoPolyo","onPolyoChangeByName","previewSquareWidth","previewSquareHeight","polyoList","DropdownButton","drop","id","title","onSelect","setPolyoByName","brush","Dropdown","Item","eventKey","onToggleEraser","onToggleFill","getFillColor","Canvas","canvasRef","React","createRef","drawCanvas","pixelWidth","canvasWidth","pixelHeight","canvasHeight","context","current","getContext","clearRect","keys","index","splitIndex","split","y","Number","x","beginPath","fillStyle","fillRect","fill","ref","border","CanvasContainer","MyImage","image","handleClick","myimageop","newimages","myimages","num","maincanvas","localStorage","setItem","onImageSave","ImagePreviewCanvas","ImagePreview","margin","ButtonGroup","toggle","ToggleButton","type","checked","e","onMyImageOpChange","currentTarget","renderMyImage","Crudbar","WorkspaceDiv","Workspace","defaultPolyo","getItem","userPolyo","userPolyoIdHistory","parse","canvasHistory","polyoHistory","shuffledPolyos","shufflePolyominos","slice","canvasSquareWidth","canvasSquareHeight","currentUser","currentUserId","primaryColor","xSquares","ySquares","currentPolyoHistory","canvasStep","currentPolyoStep","changePrimaryColor","changePolyo","changePolyoByName","changeCanvas","changeBoardSize","changePolyoHistory","changeSquaresHistory","changeUserPolyo","changeMyImages","changeMyImageOp","toggleEraser","toggleColorSelector","toggleFill","newImage","resetCanvas","selected","history","polyos","userIdHistory","concat","filter","squares","isUndo","newStep","stepUserId","newval","turnOffOtherTools","skip","tempValue","randomIndex","shuffledPolyominos","currentIndex","images","op","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a35e9e1e.chunk.js","sourcesContent":["export const polyominos = [\r\n    {\r\n        name: 'lthing',\r\n        data: [\r\n            [0, 0],\r\n            [-1, 1],\r\n            [0, 1],\r\n            [0, -1],\r\n            [1, 0],\r\n            [2, 0]\r\n        ]\r\n    },\r\n    {\r\n        name: 'tshape',\r\n        data: [\r\n            [0, 0],\r\n            [-1, -1],\r\n            [-1, 0],\r\n            [-1, 1],\r\n            [1, 0],\r\n            [2, 0]\r\n        ]\r\n    },\r\n    {\r\n        name: 'stairs',\r\n        data: [\r\n            [0, 0],\r\n            [-1, -1],\r\n            [0, -1],\r\n            [1, 0],\r\n            [1, 1],\r\n            [2, 1]\r\n        ]\r\n    },\r\n    {\r\n        name: 'doublel',\r\n        data: [\r\n            [0, 0],\r\n            [-1, -1],\r\n            [-1, 0],\r\n            [1, 0],\r\n            [2, 0],\r\n            [2, 1]\r\n        ]\r\n    },\r\n    {\r\n        name: 'line',\r\n        data: [\r\n            [0, 0],\r\n            [-2, 0],\r\n            [-1, 0],\r\n            [1, 0],\r\n            [2, 0]\r\n        ]\r\n    },\r\n    {\r\n        name: 'handman',\r\n        data: [\r\n            [0, 0],\r\n            [0, -1],\r\n            [0, 1],\r\n            [0, 2],\r\n            [1, 0]\r\n        ]\r\n    },\r\n    {\r\n        name: 'donut',\r\n        data: [\r\n            [-1, -1],\r\n            [-1, 0],\r\n            [-1, 1],\r\n            [0, -1],\r\n            [0, 1],\r\n            [1, 1],\r\n            [1, 0],\r\n            [1, -1]\r\n        ]\r\n    },\r\n    {\r\n        name: 'crosshair',\r\n        data: [\r\n            [-2, 0],\r\n            [-1, 0],\r\n            [0, 0],\r\n            [1, 0],\r\n            [2, 0],\r\n            [0, -2],\r\n            [0, -1],\r\n            [0, 1],\r\n            [0, 2]\r\n        ]\r\n    },\r\n    {\r\n        name: '4parenthesis',\r\n        data: [\r\n            [-2, -2],\r\n            [-2, -1],\r\n            [-1, -2],\r\n            [2, 2],\r\n            [2, 1],\r\n            [1, 2],\r\n            [-2, 2],\r\n            [-2, 1],\r\n            [-1, 2],\r\n            [2, -2],\r\n            [2, -1],\r\n            [1, -2]\r\n        ]\r\n    },\r\n    {\r\n        name: '2parenthesis',\r\n        data: [\r\n            [2, 2],\r\n            [2, 1],\r\n            [0, 2],\r\n            [0, -2],\r\n            [2, -1],\r\n            [2, -2],\r\n            [1, 2],\r\n            [1, -2],\r\n            [-2, 2],\r\n            [-2, -2],\r\n            [-2, 1],\r\n            [-2, -1],\r\n            [-1, 2],\r\n            [-1, -2]\r\n        ]\r\n    },\r\n    {\r\n        name: 'arrow',\r\n        data: [\r\n            [2, 0],\r\n            [1, 0],\r\n            [0, 0],\r\n            [-1, 0],\r\n            [-2, 0],\r\n            [0, -2],\r\n            [0, -1],\r\n            [0, 1],\r\n            [0, 2],\r\n            [-1, 1],\r\n            [-1, -1]\r\n        ]\r\n    },\r\n    {\r\n        name: 'x',\r\n        data: [\r\n            [2, 2],\r\n            [2, -2],\r\n            [-2, 2],\r\n            [-2, -2],\r\n            [0, 0],\r\n            [1, 1],\r\n            [1, -1],\r\n            [-1, 1],\r\n            [-1, -1]\r\n        ]\r\n    }\r\n];\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst BoardSquare = styled.td`\r\n    background: ${props => (props.assignedColor)};\r\n    width: ${props => (props.width)}px;\r\n    height: ${props => (props.height)}px;\r\n    text-align: center;\r\n    border: 2px solid black;\r\n    cursor: pointer;\r\n    user-select: none;\r\n\r\n    &.is-being-checked {\r\n        outline-color: ${props => (props.currentColor)};\r\n        outline-style: dashed;\r\n        outline-width: 5px;\r\n    }\r\n`;\r\n\r\nexport default class Square extends Component {\r\n\r\n    constructor(props) {\r\n        super();\r\n\r\n        this.getCursor = this.getCursor.bind(this);\r\n    }\r\n\r\n    getCursor() {\r\n        // todo - need a proper way to get an eyedropper icon for color selector and eraser icon for eraser\r\n        return \"pointer\";\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <BoardSquare\r\n                width={this.props.width}\r\n                height={this.props.height}\r\n                currentColor={this.props.currentColor}\r\n                assignedColor={this.props.assignedColor}\r\n                cursor={this.getCursor()}\r\n                className={this.props.isBeingChecked ? \"is-being-checked\" : \"\"}\r\n                onMouseEnter={() => this.props.onSetCurrentCenter(this.props.row, this.props.col)}\r\n                onMouseUp={() => this.props.mouseIsUp()}\r\n                onMouseDown={() => this.props.mouseIsDown(this.props.row, this.props.col)}\r\n                >\r\n            </BoardSquare>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport { MdRedo, MdUndo } from 'react-icons/md';\r\nimport Square from './square.component';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst Grid = styled.table`\r\n    border-collapse: collapse;\r\n    margin: auto;\r\n\r\n    background-image:\r\n      linear-gradient(45deg, #f0f5f5 25%, transparent 25%),\r\n      linear-gradient(45deg, transparent 75%, #f0f5f5 75%),\r\n      linear-gradient(45deg, transparent 75%, #f0f5f5 75%),\r\n      linear-gradient(45deg, #f0f5f5 25%, #ffffff 25%);\r\n    \r\n    background-size: 80px 80px;\r\n\r\n    background-position: 0 0, 0 0, -40px -40px, 40px 40px;\r\n`;\r\n\r\nconst CanvasControls = styled.div`\r\n    text-align: center;\r\n`;\r\n\r\nconst Redo = styled(MdRedo)`\r\n    cursor: pointer;\r\n`;\r\n\r\nconst Undo = styled(MdUndo)`\r\n    cursor: pointer;\r\n`;\r\n\r\nconst BoardWrapper = styled.div``;\r\n\r\nexport default class Board extends Component {\r\n    constructor(props) {\r\n        super();\r\n\r\n        this.state = {\r\n            currentComputedPolyo: [-1, -1],\r\n            isMouseDown: false\r\n        }\r\n\r\n        this.setCurrentCenter = this.setCurrentCenter.bind(this);\r\n        this.mouseIsDown = this.mouseIsDown.bind(this);\r\n        this.mouseIsUp = this.mouseIsUp.bind(this);\r\n        this.increaseGrid = this.increaseGrid.bind(this);\r\n        this.decreaseGrid = this.decreaseGrid.bind(this);\r\n        this.undoCanvas = this.undoCanvas.bind(this);\r\n        this.redoCanvas = this.redoCanvas.bind(this);\r\n        this.clearCanvas = this.clearCanvas.bind(this);\r\n    }\r\n\r\n    increaseGrid() {\r\n        if (this.props.boardX+1 <= 20) {\r\n            this.props.onBoardSizeChange(this.props.boardX+1, this.props.boardY+1)\r\n        }\r\n    }\r\n\r\n    decreaseGrid() {\r\n        if (this.props.boardX-1 >= 10) {\r\n            this.props.onBoardSizeChange(this.props.boardX-1, this.props.boardY-1)\r\n        }\r\n    }\r\n\r\n    undoCanvas() {\r\n        this.props.onUndoCanvas(true);\r\n    }\r\n\r\n    redoCanvas() {\r\n        this.props.onRedoCanvas(false);\r\n    }\r\n\r\n    clearCanvas() {\r\n        this.props.onCanvasChange([]);\r\n    }\r\n\r\n    setCurrentCenter(row, col) {\r\n        const newPolyo = this.computePolyoCoords(row, col);\r\n        this.setState(state => ({\r\n            currentComputedPolyo: newPolyo\r\n        }));\r\n\r\n        if (this.state.isMouseDown) {\r\n            this.assignColorToSquares(this.props.currentPrimaryColor, newPolyo);\r\n        }\r\n    }\r\n\r\n    eraseSquares(polyo) {\r\n        let canvas = Object.assign({}, this.props.canvas);\r\n\r\n        polyo.map((item) => {\r\n            let squareKey = item[0] + ',' + item[1];\r\n            delete canvas[squareKey];\r\n            return true;\r\n        });\r\n\r\n        this.props.onCanvasChange(canvas);\r\n    }\r\n\r\n    getColorFromSquare(assignedColor) {\r\n        if (assignedColor === 0) {\r\n            // todo - maybe display an alert telling the user to select a color\r\n            return;\r\n        }\r\n        this.props.onPrimaryColorChange(assignedColor);\r\n        this.props.onToggleColorSelector();\r\n    }\r\n\r\n    assignColorToSquares(newColor, polyo, assignedColor) {\r\n        if (this.props.isColorSelectorOn) {\r\n            this.getColorFromSquare(assignedColor);\r\n            return;\r\n        }\r\n        if (this.props.isEraserOn) {\r\n            this.eraseSquares(polyo);\r\n            return;\r\n        }\r\n        if (this.props.isFillOn) {\r\n            const newCanvas = this.fillSquares(polyo[0], assignedColor, newColor, Object.assign({}, this.props.canvas));\r\n            this.props.onCanvasChange(newCanvas);\r\n            return;\r\n        }\r\n\r\n        let canvas = Object.assign({}, this.props.canvas);\r\n\r\n        polyo.map((item) => {\r\n            canvas[item[0] + ',' + item[1]] = newColor;\r\n            return true;\r\n        });\r\n\r\n        this.props.onCanvasChange(canvas);\r\n    }\r\n\r\n    fillSquares(square, oldColor, newColor, canvas) {\r\n        // this is an implementation of \"flood fill\" as shown here:\r\n        // https://www.geeksforgeeks.org/flood-fill-algorithm-implement-fill-paint/\r\n        const key = square[0] + \",\" + square[1];\r\n\r\n        if (typeof canvas[key] === 'undefined') {     \r\n            if (oldColor !== 0) {\r\n                return canvas;\r\n            }\r\n            canvas[key] = 0;\r\n        }\r\n\r\n        if (canvas[key] !== oldColor) {\r\n            return canvas;\r\n        }\r\n        canvas[key] = newColor;\r\n\r\n        this.fillSquares([Math.min(this.props.boardX - 1, square[0] + 1), square[1]], oldColor, newColor, canvas);\r\n        this.fillSquares([Math.max(0, square[0] - 1), square[1]], oldColor, newColor, canvas);\r\n        this.fillSquares([square[0], Math.min(this.props.boardY - 1, square[1] + 1)], oldColor, newColor, canvas);\r\n        this.fillSquares([square[0], Math.max(0, square[1] - 1)], oldColor, newColor, canvas);\r\n\r\n        return canvas;\r\n    }\r\n\r\n    computePolyoCoords(row, col) {\r\n        if (this.props.isColorSelectorOn || this.props.isFillOn) {\r\n            return [[row, col]];\r\n        }\r\n\r\n        return this.props.currentPolyo.map((value) => {\r\n            return [(row + value[0]), (col + value[1])]\r\n        });\r\n    }\r\n\r\n    getSquareAssignment(row, col) {\r\n        const rowColKey = row + ',' + col;\r\n        if (this.props.canvas[rowColKey] && this.props.canvas[rowColKey] !== 'undefined') {\r\n            return this.props.canvas[rowColKey];\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    isSquareBeingChecked(row, col) {\r\n        const stringifiedCoords = JSON.stringify([row, col]);\r\n        return (this.state.currentComputedPolyo.some(item => (JSON.stringify(item) === stringifiedCoords)));\r\n    }\r\n\r\n    mouseIsDown(row, col) {\r\n        this.setState(state => ({\r\n            isMouseDown: true\r\n        }));\r\n        this.assignColorToSquares(this.props.currentPrimaryColor, this.state.currentComputedPolyo, this.getSquareAssignment(row, col));\r\n    }\r\n\r\n    mouseIsUp() {\r\n        this.setState(state => ({\r\n            isMouseDown: false\r\n        }));\r\n    }\r\n\r\n    renderSquare(row, col) {\r\n        const key = 'square' + row + col;\r\n        return (\r\n            <Square \r\n                key={key}\r\n                row={row}\r\n                col={col}\r\n                width={this.props.squareWidth}\r\n                height={this.props.squareHeight}\r\n                currentColor={this.props.currentPrimaryColor}\r\n                assignedColor={this.getSquareAssignment(row, col)}\r\n                isBeingChecked={this.isSquareBeingChecked(row, col)}\r\n                isColorSelectorOn={this.props.isColorSelectorOn}\r\n                isEraserOn={this.props.isEraserOn}\r\n                onSetCurrentCenter={() => this.setCurrentCenter(row, col)}\r\n                mouseIsUp={this.mouseIsUp}\r\n                mouseIsDown={this.mouseIsDown}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderRow(row) {\r\n        const key = 'row' + row;\r\n        return (\r\n            <tr key={key}>\r\n            {\r\n                [...Array(this.props.boardX)].map((_, column) => this.renderSquare(row, column))\r\n            }\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    resetCurrentPolyo() {\r\n        this.setState(state => ({\r\n            currentComputedPolyo: [-1, -1]\r\n        }))\r\n    }\r\n\r\n    getGridWidth() {\r\n        return this.props.squareWidth * this.props.boardX;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <BoardWrapper>\r\n                <CanvasControls>\r\n                    <div style={{userSelect: 'none'}}>\r\n                        Canvas Controls\r\n                    </div>\r\n                    <Undo data-tip=\"Undo Canvas Change\" onClick={this.undoCanvas} size={this.props.matIconSize} />\r\n                    <Redo data-tip=\"Redo Canvas Change\" onClick={this.redoCanvas} size={this.props.matIconSize} />\r\n                    <Button className=\"ml-2\" variant=\"secondary\" onClick={this.clearCanvas}>Clear Canvas</Button>\r\n                </CanvasControls>\r\n                <Grid>\r\n                    <tbody onMouseLeave={() => this.resetCurrentPolyo()} style={{width: this.getGridWidth(), display: \"block\"}}>\r\n                        {\r\n                            [...Array(this.props.boardY)].map((_, row) => this.renderRow(row))\r\n                        }\r\n                    </tbody>\r\n                </Grid>\r\n            </BoardWrapper>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst PreviewSquare = styled.td`\r\n    width: ${props => (props.width)}px;\r\n    height: ${props => (props.height)}px;\r\n    background: ${props => (props.isAssigned ? props.currentColor : \"\")};\r\n    text-align: center;\r\n    border: 2px solid black;\r\n    cursor: pointer;\r\n\r\n    &.is-center {\r\n        outline-color: red;\r\n        outline-style: dashed;\r\n        outline-width: 5px;\r\n    }\r\n`;\r\n\r\n\r\nexport default class PolyominoPreviewSquare extends Component {\r\n    render() {\r\n        return (\r\n            <PreviewSquare \r\n                width={this.props.width}\r\n                height={this.props.height}\r\n                className={this.props.isCenter ? \"is-center\" : \"\"}\r\n                currentColor={this.props.currentPrimaryColor}\r\n                isAssigned={this.props.isAssigned} \r\n                onClick={() => this.props.onPolyominoUpdate()} />\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport PolyominoPreviewSquare from './polyomino-preview-square';\r\n\r\nconst BoardGrid = styled.table`\r\n    border-collapse: collapse;\r\n    margin: auto;\r\n    background-image:\r\n      linear-gradient(45deg, #f0f5f5 25%, transparent 25%),\r\n      linear-gradient(45deg, transparent 75%, #f0f5f5 75%),\r\n      linear-gradient(45deg, transparent 75%, #f0f5f5 75%),\r\n      linear-gradient(45deg, #f0f5f5 25%, #ffffff 25%);\r\n    \r\n    background-size: 60px 60px;\r\n\r\n    background-position: 0 0, 0 0, -30px -30px, 30px 30px;\r\n`;\r\n\r\nexport default class PolyominoPreview extends Component {\r\n    isSquareInCurrentPolyo(row, col) {\r\n        return Array.isArray(\r\n            this.props.currentPolyo.find(\r\n                (item) => (item[0] === row && item[1] === col)\r\n            )\r\n        );\r\n    }\r\n\r\n    isSquareCenter(row, col) {\r\n        return (row === 0 && col === 0);\r\n    }\r\n\r\n    toggleSquareInCurrentPolyo(row, col) {\r\n        let foundNum = -1;\r\n\r\n        let polyo = this.props.currentPolyo.map((element, key) => {\r\n            if (element[0] === row && element[1] === col) {\r\n                foundNum = key;\r\n            }\r\n            return element;\r\n        });\r\n        if (foundNum <= -1) {\r\n            polyo.push([row, col]);\r\n        } else {\r\n            polyo.splice(foundNum, 1);\r\n        }\r\n        this.props.onPolyoChange(polyo);\r\n    }\r\n\r\n    renderSquare(row, col) {\r\n        row = row-2;\r\n        col = col-2;\r\n        const key = 'preview_' + row + \",\" + col;\r\n        return (\r\n            <PolyominoPreviewSquare\r\n                key={key}\r\n                row={row}\r\n                col={col}\r\n                width={this.props.squareWidth}\r\n                height={this.props.squareHeight}\r\n                currentPrimaryColor={this.props.currentPrimaryColor}\r\n                isAssigned={this.isSquareInCurrentPolyo(row, col)}\r\n                isCenter={this.isSquareCenter(row, col)}\r\n                onPolyominoUpdate={() => this.toggleSquareInCurrentPolyo(row, col)}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderRow(row) {\r\n        const key = 'row' + row;\r\n        return (\r\n            <tr key={key}>\r\n            {\r\n                [...Array(this.props.boardX)].map((_, column) => this.renderSquare(row, column))\r\n            }\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <BoardGrid>\r\n                <tbody>\r\n                {\r\n                    [...Array(this.props.boardY)].map((_, row) => this.renderRow(row))\r\n                }\r\n                </tbody>\r\n            </BoardGrid>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst SelectablePolyominoBlock = styled.td`\r\n    width: ${props => (props.squareWidth)}px;\r\n    height: ${props => (props.squareHeight)}px;\r\n    background: ${props => (props.isAssigned ? props.currentColor : \"white\")};\r\n    text-align: center;\r\n    border: ${props => (props.isAssigned ? \"2px solid black\" : \"0\")};\r\n`;\r\n\r\nconst PolyominoGrid = styled.table`\r\n    width: 100px;\r\n    height: 100px;\r\n    border-collapse: separate;\r\n    border: ${props => (props.isCurrent ? \"2px dotted red\" : \"0\")};\r\n\r\n    &:not(:last-child) {\r\n        border-right: ${props => (props.isCurrent ? \"2px dotted red\" : \"2px dotted black\")};\r\n    }\r\n`;\r\n\r\nexport default class SelectablePolyomino extends Component {\r\n    isSquareInCurrentPolyo(row, col) {\r\n        return Array.isArray(\r\n            this.props.polyomino.find(\r\n                (item) => (item[0] === row && item[1] === col)\r\n            )\r\n        );\r\n    }\r\n\r\n    renderSquare(row, col) {\r\n        row = row-2;\r\n        col = col-2;\r\n        const key = row + \",\" + col;\r\n        return (\r\n            <SelectablePolyominoBlock \r\n                key={key}\r\n                row={row}\r\n                col={col}\r\n                squareWidth={20}\r\n                squareHeight={20}\r\n                currentColor={this.props.currentPrimaryColor}\r\n                isAssigned={this.isSquareInCurrentPolyo(row, col)}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderRow(row) {\r\n        const key = 'row' + row;\r\n        return (\r\n            <tr key={key}>\r\n            {\r\n                [...Array(5)].map((_, column) => this.renderSquare(row, column))\r\n            }\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <PolyominoGrid \r\n                onClick={() => this.props.setCurrentPolyomino(this.props.polyomino)}\r\n                isCurrent={this.props.isCurrent}>\r\n                <tbody>\r\n                {\r\n                    [...Array(5)].map((_, row) => this.renderRow(row))\r\n                }\r\n                </tbody>\r\n            </PolyominoGrid>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport SelectablePolyomino from './selectable-polyomino';\r\n\r\nconst SelectorDiv = styled.div`\r\n    display: flex;\r\n    height: 7rem;\r\n    width: 300px;\r\n    outline: 2px solid black;\r\n    background-color: white;\r\n    cursor: pointer;\r\n    margin: auto;\r\n`;\r\n\r\nexport default class PolyominoSelector extends Component {\r\n    getIsSelected(key) {\r\n        return key === this.props.currentUserPolyoId;\r\n    }\r\n\r\n    setCurrentPolyomino(polyo, key) {\r\n        this.props.onUserPolyoChange(key);\r\n        this.props.onPolyoChange(polyo, true);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <SelectorDiv>\r\n                {\r\n                    this.props.selectablePolyos.map((polyo, key) => (\r\n                        <SelectablePolyomino \r\n                            key={'selectable_' + polyo.name}\r\n                            isCurrent={this.getIsSelected(key)}\r\n                            setCurrentPolyomino={() => this.setCurrentPolyomino(polyo.data, key)}\r\n                            currentPrimaryColor={this.props.currentPrimaryColor}\r\n                            polyomino={polyo.data}\r\n                        />\r\n                    ))\r\n                }\r\n            </SelectorDiv>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport { SliderPicker } from 'react-color';\r\n\r\nconst StyledPicker = styled(SliderPicker)`\r\n    margin: 10px auto;\r\n`;\r\n\r\nexport default class PrimaryPicker extends Component {\r\n    constructor(props) {\r\n        super();\r\n        \r\n        this.state = {\r\n            color: props.color\r\n        }\r\n\r\n        this.handleChangeComplete = this.handleChangeComplete.bind(this);\r\n        this.handleColorChange = this.handleColorChange.bind(this);\r\n    }\r\n\r\n    handleColorChange(color, event) {\r\n        this.setState({ \r\n            color: color.hex \r\n        });\r\n\r\n        this.props.onColorChange(color.hex);\r\n    }\r\n\r\n    handleChangeComplete(color) {\r\n        this.setState({ \r\n            color: color.hex \r\n        });\r\n\r\n        this.props.onColorChange(color.hex);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <StyledPicker \r\n                color={this.state.color} \r\n                onChange={this.handleColorChange} \r\n                onChangeComplete={this.handleChangeComplete} />\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport default class RandomPolyomino extends Component {\r\n    constructor(props) {\r\n        super();\r\n        \r\n        this.setRandomPolyomino = this.setRandomPolyomino.bind(this);\r\n    }\r\n\r\n    setRandomPolyomino() {\r\n        let random = Math.floor(Math.random() * this.props.polyominos.length);\r\n        let polyo = typeof this.props.polyominos[random] != \"undefined\" ? this.props.polyominos[random] : this.props.polyominos[0];\r\n        this.props.onPolyoChange(polyo.data);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Button variant=\"secondary\" onClick={this.setRandomPolyomino}>Random Brush</Button>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport { MdRotateLeft, MdRotateRight, MdFlip, MdRedo, MdUndo, MdColorize } from 'react-icons/md';\r\nimport { FaEraser } from 'react-icons/fa';\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport PolyominoPreview from './polyomino-preview/polyomino-preview.component';\r\nimport PolyominoSelector from './polyomino-selector/polyomino-selector';\r\nimport PrimaryPicker from './colorpicker/primary-colorpicker.component';\r\nimport RandomPolyomino from './random-polyomino/random-polyomino.component';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport { CgColorBucket } from 'react-icons/cg';\r\n\r\nconst RotateLeft = styled(MdRotateLeft)`\r\n    cursor: pointer;\r\n`;\r\n\r\nconst RotateRight = styled(MdRotateRight)`\r\n    cursor: pointer;\r\n`;\r\n\r\nconst ColorSelect = styled(MdColorize)`\r\n    cursor: pointer;\r\n    color: ${props => (props.color)};\r\n`;\r\n\r\nconst Eraser = styled(FaEraser)`\r\n    cursor: pointer;\r\n    color: ${props => (props.color)};\r\n`;\r\n\r\nconst Fill = styled(CgColorBucket)`\r\n    cursor: pointer;\r\n    color: ${props => (props.color)};\r\n`;\r\n\r\nconst FlipX = styled(MdFlip)`\r\n    transform: rotate(90deg);\r\n    cursor: pointer;\r\n`;\r\n\r\nconst FlipY = styled(MdFlip)`\r\n    cursor: pointer;\r\n`;\r\n\r\nconst Redo = styled(MdRedo)`\r\n    cursor: pointer;\r\n`;\r\n\r\nconst Undo = styled(MdUndo)`\r\n    cursor: pointer;\r\n`;\r\n\r\nconst PolyominoSelectorContainer = styled.div`\r\n    display: flex;\r\n    margin: 10px auto;\r\n`;\r\n\r\nconst PolyominoCanvasControls = styled.div`\r\n    display: flex;\r\n`;\r\n\r\nconst PolyominoMovementControls = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin: 10px auto;\r\n`;\r\n\r\nconst Controls = styled.div`\r\n    padding: 10px;\r\n    width: 24rem;\r\n    background-color: #e9ecef;\r\n    box-shadow: 0 1px 4px #e9ecef;\r\n`;\r\n\r\nexport default class BrushControls extends Component {\r\n    constructor(props) {\r\n        super();\r\n\r\n        this.rotateLeft = this.rotateLeft.bind(this);\r\n        this.rotateRight = this.rotateRight.bind(this);\r\n        this.flipX = this.flipX.bind(this);\r\n        this.flipY = this.flipY.bind(this);\r\n        this.undoPolyo = this.undoPolyo.bind(this);\r\n        this.redoPolyo = this.redoPolyo.bind(this);\r\n        this.clearPolyomino = this.clearPolyomino.bind(this);\r\n        this.getColorSelectColor = this.getColorSelectColor.bind(this);\r\n        this.getEraserColor = this.getEraserColor.bind(this);\r\n    }\r\n\r\n    rotateLeft() {\r\n        this.props.onPolyoChange(this.props.currentPolyo.map((position) => {\r\n            return [position[1] * -1, position[0]];\r\n        }));\r\n    }\r\n\r\n    rotateRight() {\r\n        this.props.onPolyoChange(this.props.currentPolyo.map((position) => {\r\n            return [position[1], position[0] * -1];\r\n        }));\r\n    }\r\n\r\n    flipX() {\r\n        this.props.onPolyoChange(this.props.currentPolyo.map((position) => {\r\n            return [position[0] * -1, position[1]];\r\n        }));\r\n    }\r\n\r\n    flipY() {\r\n        this.props.onPolyoChange(this.props.currentPolyo.map((position) => {\r\n            return [position[0], position[1] * -1];\r\n        }));\r\n    }    \r\n\r\n    clearPolyomino() {\r\n        this.props.onPolyoChange([]);\r\n    }\r\n\r\n    undoPolyo() {\r\n        this.props.onUndoPolyo(true);\r\n    }\r\n\r\n    redoPolyo() {\r\n        this.props.onRedoPolyo(false);\r\n    }\r\n\r\n    setPolyoByName(name) {\r\n        this.props.onPolyoChangeByName(name);\r\n    }\r\n\r\n    getColorSelectColor() {\r\n        if (this.props.isColorSelectorOn) {\r\n            return \"gray\";\r\n        }\r\n        return \"black\";\r\n    }\r\n\r\n    getEraserColor() {\r\n        if (this.props.isEraserOn) {\r\n            return \"gray\";\r\n        }\r\n        return \"black\";\r\n    }\r\n\r\n    getFillColor() {\r\n        if (this.props.isFillOn) {\r\n            return \"gray\";\r\n        }\r\n        return \"black\";\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Controls>\r\n                <PrimaryPicker \r\n                    color={this.props.currentPrimaryColor}\r\n                    onColorChange={this.props.onPrimaryColorChange} />\r\n                <PolyominoPreview \r\n                    squareWidth={this.props.previewSquareWidth}\r\n                    squareHeight={this.props.previewSquareHeight}\r\n                    currentPrimaryColor={this.props.currentPrimaryColor}\r\n                    currentPolyo={this.props.currentPolyo}\r\n                    onPolyoChange={this.props.onPolyoChange}\r\n                    boardX={5} \r\n                    boardY={5} />\r\n                <PolyominoSelectorContainer>\r\n                    <PolyominoSelector \r\n                        selectablePolyos={this.props.selectablePolyos}\r\n                        currentPrimaryColor={this.props.currentPrimaryColor}\r\n                        currentUserPolyoId={this.props.currentUserPolyoId}\r\n                        onPolyoChange={this.props.onPolyoChange} \r\n                        onUserPolyoChange={this.props.onUserPolyoChange} />\r\n                </PolyominoSelectorContainer>\r\n                <PolyominoCanvasControls>\r\n                    <RandomPolyomino onPolyoChange={this.props.onPolyoChange} polyominos={this.props.polyoList} />\r\n                    <Button variant=\"secondary\" onClick={this.clearPolyomino}>Clear Brush</Button>\r\n                    <DropdownButton variant=\"secondary\" drop={'right'} id=\"select-brush\" title=\"Select Brush\" onSelect={(name) => this.setPolyoByName(name)}>\r\n                        {this.props.polyoList.map(\r\n                            (brush) => (\r\n                                <Dropdown.Item key={\"brush_\" + brush.name} eventKey={brush.name}>{brush.name}</Dropdown.Item>\r\n                            )\r\n                        )}\r\n                    </DropdownButton>\r\n                </PolyominoCanvasControls>\r\n                <PolyominoMovementControls>\r\n                    <RotateLeft data-tip=\"Rotate Counterclockwise\" onClick={this.rotateLeft} size={this.props.matIconSize} />\r\n                    <RotateRight data-tip=\"Rotate Clockwise\" onClick={this.rotateRight} size={this.props.matIconSize} />\r\n                    <FlipX data-tip=\"Flip Horizontally\" onClick={this.flipX} size={this.props.matIconSize} />\r\n                    <FlipY data-tip=\"Flip Vertically\" onClick={this.flipY} size={this.props.matIconSize} />\r\n                    <Undo data-tip=\"Undo Brush Change\" onClick={this.undoPolyo} size={this.props.matIconSize} />\r\n                    <Redo data-tip=\"Redo Brush Change\" onClick={this.redoPolyo} size={this.props.matIconSize} />\r\n                </PolyominoMovementControls>\r\n                <PolyominoMovementControls>\r\n                    <ColorSelect data-tip=\"Toggle Color Selector\" onClick={this.props.onToggleColorSelector} size={this.props.matIconSize} color={this.getColorSelectColor()} />\r\n                    <Eraser data-tip=\"Toggle Eraser\" onClick={this.props.onToggleEraser} size={this.props.matIconSize} color={this.getEraserColor()} />\r\n                    <Fill data-tip=\"Toggle Fill\" onClick={this.props.onToggleFill} size={this.props.matIconSize} color={this.getFillColor()} />\r\n                </PolyominoMovementControls>\r\n                <ReactTooltip />\r\n            </Controls>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class Canvas extends Component {\r\n    constructor(props) {\r\n        super();\r\n\r\n        this.canvasRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.drawCanvas();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.drawCanvas();\r\n    }\r\n\r\n    drawCanvas() {\r\n        const canvas = this.props.canvas;\r\n        const pixelWidth = this.props.canvasWidth / this.props.boardX;\r\n        const pixelHeight = this.props.canvasHeight / this.props.boardY;\r\n        const context = this.canvasRef.current.getContext(\"2d\");\r\n        context.clearRect(0, 0, this.props.canvasWidth, this.props.canvasHeight);\r\n\r\n        Object.keys(canvas).map((index) => {\r\n            const splitIndex = index.split(',');\r\n            const y = Number(splitIndex[0]);\r\n            const x = Number(splitIndex[1]);\r\n\r\n            context.beginPath();\r\n            context.fillStyle = canvas[index];\r\n            context.fillRect(x * pixelWidth, y * pixelWidth, pixelWidth, pixelHeight);\r\n            context.fill();\r\n            return true;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <canvas \r\n                width={this.props.canvasWidth} \r\n                height={this.props.canvasHeight} \r\n                ref={this.canvasRef} \r\n                style={{border: \"2px solid\"}}></canvas>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport Canvas from '../canvas/canvas.component';\r\n\r\nconst CanvasContainer = styled.div`\r\n    display: inline-block;\r\n    padding: 0.5rem;\r\n`;\r\n\r\nexport default class MyImage extends Component {\r\n    constructor(props) {\r\n        super()\r\n\r\n        this.state = {\r\n            canvas: props.image\r\n        }\r\n\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick() {\r\n        if (this.props.myimageop === 'load') {\r\n            this.props.onCanvasChange(this.state.canvas);\r\n        }\r\n        if (this.props.myimageop === 'save') {\r\n            // todo - if we save a lot at once (click a bunch of them in rapid succession), it saves them incorrectly\r\n            // recommendation - have a saving function that waits for this code to complete\r\n            const newimages = [...this.props.myimages];\r\n            newimages[this.props.num] = this.props.maincanvas;\r\n            this.setState(state => ({\r\n                canvas: this.props.maincanvas\r\n            }));\r\n\r\n            localStorage.setItem('myimages', JSON.stringify(newimages));\r\n            this.props.onImageSave(this.props.num, this.props.maincanvas);\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <CanvasContainer onClick={this.handleClick}>\r\n                <Canvas \r\n                    canvas={this.state.canvas}\r\n                    boardX={this.props.boardX}\r\n                    boardY={this.props.boardY}\r\n                    canvasWidth={100}\r\n                    canvasHeight={100}\r\n                     />\r\n            </CanvasContainer>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { ToggleButton, ButtonGroup } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport Canvas from './canvas/canvas.component';\r\nimport MyImage from './my-image/my-image.component';\r\n\r\nconst ImagePreviewCanvas = styled.div`\r\n    width: 24rem;\r\n    background-color: #e9ecef;\r\n    box-shadow: 0 1px 4px #e9ecef;\r\n    padding: 10px;\r\n`;\r\n\r\nexport default class ImagePreview extends Component {\r\n    renderMyImage(image, key) {\r\n        return (\r\n            <MyImage\r\n                key={\"myimage-\" + key}\r\n                num={key}\r\n                image={image} \r\n                boardX={this.props.boardX}\r\n                boardY={this.props.boardY} \r\n                myimages={this.props.myimages}\r\n                myimageop={this.props.myimageop}\r\n                maincanvas={this.props.canvas} \r\n                onCanvasChange={this.props.onCanvasChange} ></MyImage>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ImagePreviewCanvas>\r\n                <div style={{margin: \"10px\"}}>\r\n                    Image Preview (right click to save)\r\n                </div>\r\n                <p>20 x 20</p>\r\n                <Canvas \r\n                    canvas={this.props.canvas}\r\n                    boardX={this.props.boardX}\r\n                    boardY={this.props.boardY}\r\n                    canvasWidth={20}\r\n                    canvasHeight={20} />\r\n                <p>200 x 200</p>\r\n                <Canvas \r\n                    canvas={this.props.canvas}\r\n                    boardX={this.props.boardX}\r\n                    boardY={this.props.boardY}\r\n                    canvasWidth={200}\r\n                    canvasHeight={200} />\r\n                <p>My Images</p>\r\n                <div>\r\n                    <ButtonGroup toggle>\r\n                        <ToggleButton\r\n                            key=\"loadonclick\"\r\n                            type=\"radio\"\r\n                            variant=\"secondary\"\r\n                            name=\"radio\"\r\n                            value=\"load\"\r\n                            checked={this.props.myimageop === \"load\"}\r\n                            onChange={(e) => this.props.onMyImageOpChange(e.currentTarget.value)}>\r\n                            Load On Click\r\n                        </ToggleButton>\r\n                        <ToggleButton\r\n                            key=\"saveonclick\"\r\n                            type=\"radio\"\r\n                            variant=\"secondary\"\r\n                            name=\"radio\"\r\n                            value=\"save\"\r\n                            checked={this.props.myimageop === \"save\"}\r\n                            onChange={(e) => this.props.onMyImageOpChange(e.currentTarget.value)}>\r\n                            Save On Click\r\n                        </ToggleButton>\r\n                    </ButtonGroup>\r\n                </div>\r\n                {\r\n                    this.props.myimages.map((image, key) => this.renderMyImage(image, key))\r\n                }\r\n            </ImagePreviewCanvas>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport { polyominos } from '../data/polyominos';\r\n\r\nimport Board from \"./board/board.component\";\r\nimport BrushControls from \"./brush-controls/brush-controls.component\";\r\nimport ImagePreview from \"./image-preview/image-preview.component\";\r\n\r\nconst Crudbar = styled.div`\r\n    height: 56px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    background-color: #a6d0e1;\r\n    padding: 10px;\r\n    font-size: 32px;\r\n`;\r\n\r\nconst WorkspaceDiv = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    position: absolute;\r\n    top: 56px;\r\n    height: 100%;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n`;\r\n\r\nexport default class Workspace extends Component {\r\n    constructor(props) {\r\n        super();\r\n\r\n        const defaultPolyo = polyominos[Math.floor(Math.random() * polyominos.length)];\r\n        const color = localStorage.getItem('color1') ? localStorage.getItem('color1') : \"blue\";\r\n        const userPolyo = localStorage.getItem('userpolyo') ? Number(localStorage.getItem('userpolyo')) : -1;\r\n        const userPolyoIdHistory = [userPolyo];\r\n\r\n        const canvas = localStorage.getItem('canvas') ? JSON.parse(localStorage.getItem('canvas')) : {};\r\n        // const canvas = {};\r\n        const canvasHistory = [canvas];\r\n        const canvasStep = 0;\r\n\r\n        const polyo = localStorage.getItem('polyo') ? JSON.parse(localStorage.getItem('polyo')) : defaultPolyo.data;\r\n        // const polyo = {};\r\n        const polyoHistory = [polyo];\r\n        const polyoStep = 0;\r\n        const shuffledPolyos = this.shufflePolyominos();\r\n        const selectablePolyos = localStorage.getItem('selectablepolyos') ? JSON.parse(localStorage.getItem('selectablepolyos')) : shuffledPolyos.slice(0, 3);\r\n\r\n        const myimages = localStorage.getItem('myimages') ? JSON.parse(localStorage.getItem('myimages')) : [{}, {}, {}, {}, {}, {}];\r\n\r\n        const canvasSquareWidth = 80;\r\n        const canvasSquareHeight = 80;\r\n\r\n        const previewSquareWidth = canvasSquareWidth * .75;\r\n        const previewSquareHeight = canvasSquareHeight * .75;\r\n\r\n        this.state = {\r\n            canvasSquareWidth: canvasSquareWidth,\r\n            canvasSquareHeight: canvasSquareHeight,\r\n            previewSquareWidth: previewSquareWidth,\r\n            previewSquareHeight: previewSquareHeight,\r\n            currentPolyo: polyo,\r\n            currentUser: \"\",\r\n            currentUserId: \"\",\r\n            currentUserPolyoId: userPolyo,\r\n            userPolyoIdHistory: userPolyoIdHistory,\r\n            primaryColor: color,\r\n            canvas: canvas,\r\n            xSquares: 10,\r\n            ySquares: 10,\r\n            isEraserOn: false,\r\n            isColorSelectorOn: false,\r\n            isFillOn: false,\r\n            canvasHistory: canvasHistory,\r\n            currentPolyoHistory: polyoHistory,\r\n            canvasStep: canvasStep,\r\n            currentPolyoStep: polyoStep,\r\n            matIconSize: 50,\r\n            polyoList: shuffledPolyos.slice(0, 10),\r\n            selectablePolyos: selectablePolyos,\r\n            myimages: myimages,\r\n            myimageop: \"load\"\r\n        }\r\n\r\n        this.changePrimaryColor = this.changePrimaryColor.bind(this);\r\n        this.changePolyo = this.changePolyo.bind(this);\r\n        this.changePolyoByName = this.changePolyoByName.bind(this);\r\n        this.changeCanvas = this.changeCanvas.bind(this);\r\n        this.changeBoardSize = this.changeBoardSize.bind(this);\r\n        this.changePolyoHistory = this.changePolyoHistory.bind(this);\r\n        this.changeSquaresHistory = this.changeSquaresHistory.bind(this);\r\n        this.changeUserPolyo = this.changeUserPolyo.bind(this);\r\n        this.changeMyImages = this.changeMyImages.bind(this);\r\n        this.changeMyImageOp = this.changeMyImageOp.bind(this);\r\n        this.toggleEraser = this.toggleEraser.bind(this);\r\n        this.toggleColorSelector = this.toggleColorSelector.bind(this);\r\n        this.toggleFill = this.toggleFill.bind(this);\r\n        this.newImage = this.newImage.bind(this);\r\n        this.resetCanvas = this.resetCanvas.bind(this);\r\n    }\r\n\r\n    changePrimaryColor(color) {\r\n        localStorage.setItem('color1', color);\r\n        this.setState(state => ({\r\n            primaryColor: color\r\n        }));\r\n    }\r\n\r\n    changePolyo(polyo, selected = false) {\r\n        const history = this.state.currentPolyoHistory.slice(0, this.state.currentPolyoStep + 1);\r\n        const polyos = Object.assign(this.state.selectablePolyos);\r\n\r\n        if (!selected && this.state.currentUserPolyoId > -1) {\r\n            const userIdHistory = this.state.userPolyoIdHistory.slice(0, this.state.currentPolyoStep + 1);\r\n            polyos[this.state.currentUserPolyoId].data = polyo;\r\n\r\n            this.setState(state => ({\r\n                userPolyoIdHistory: userIdHistory.concat([this.state.currentUserPolyoId])\r\n            }));\r\n        }\r\n\r\n        localStorage.setItem('polyo', JSON.stringify(polyo));\r\n        localStorage.setItem('selectablepolyos', JSON.stringify(polyos));\r\n\r\n        this.setState(state => ({\r\n            currentPolyo: polyo,\r\n            currentPolyoHistory: history.concat([polyo]),\r\n            currentPolyoStep: this.state.currentPolyoStep + 1,\r\n            selectablePolyos: polyos\r\n        }));\r\n    }\r\n\r\n    changePolyoByName(name) {\r\n        this.changePolyo(this.state.polyoList.filter(function(polyomino) {\r\n            return polyomino.name === name;\r\n        })[0].data);\r\n    }\r\n\r\n    changeCanvas(squares) {\r\n        const history = this.state.canvasHistory.slice(0, this.state.canvasStep + 1);\r\n\r\n        localStorage.setItem('canvas', JSON.stringify(squares));\r\n\r\n        this.setState(state => ({\r\n            canvas: squares,\r\n            canvasHistory: history.concat([squares]),\r\n            canvasStep: this.state.canvasStep + 1\r\n        }));\r\n    }\r\n\r\n    changeBoardSize(x, y) {\r\n        this.setState(state => ({\r\n            xSquares: x,\r\n            ySquares: y\r\n        }));\r\n    }\r\n\r\n    changePolyoHistory(isUndo) {\r\n        const newStep = isUndo ? this.state.currentPolyoStep - 1 : this.state.currentPolyoStep + 1;\r\n\r\n        const polyos = Object.assign(this.state.selectablePolyos);\r\n        const stepUserId = this.state.userPolyoIdHistory[newStep];\r\n\r\n        if (stepUserId > -1) {\r\n            polyos[stepUserId].data = this.state.currentPolyoHistory[newStep];\r\n        }\r\n\r\n        if (typeof this.state.currentPolyoHistory[newStep] !== 'undefined') {\r\n            localStorage.setItem('polyo', JSON.stringify(this.state.currentPolyoHistory[newStep]));\r\n            localStorage.setItem('userpolyo', stepUserId);\r\n            localStorage.setItem('selectablepolyos', JSON.stringify(polyos));\r\n            this.setState(state => ({\r\n                currentPolyo: this.state.currentPolyoHistory[newStep],\r\n                currentPolyoStep: newStep,\r\n                currentUserPolyoId: stepUserId,\r\n                selectablePolyos: polyos,\r\n            }));\r\n        }\r\n    }\r\n\r\n    changeSquaresHistory(isUndo) {\r\n        const newStep = isUndo ? this.state.canvasStep - 1 : this.state.canvasStep + 1;\r\n\r\n        if (typeof this.state.canvasHistory[newStep] !== 'undefined') {\r\n            localStorage.setItem('canvas', JSON.stringify(this.state.canvasHistory[newStep]));\r\n            this.setState(state => ({\r\n                canvas: this.state.canvasHistory[newStep],\r\n                canvasStep: newStep\r\n            }));\r\n        }\r\n    }\r\n\r\n    changeUserPolyo(id) {\r\n        localStorage.setItem('userpolyo', id);\r\n        const userIdHistory = this.state.userPolyoIdHistory.slice(0, this.state.currentPolyoStep + 1);\r\n        this.setState(state => ({\r\n            currentUserPolyoId: id,\r\n            userPolyoIdHistory: userIdHistory.concat([id])\r\n        }));\r\n    }\r\n\r\n    toggleEraser() {\r\n        const newval = !this.state.isEraserOn;\r\n        this.setState(state => ({\r\n            isEraserOn: newval\r\n        }));\r\n\r\n        this.turnOffOtherTools(\"eraser\");\r\n    }\r\n\r\n    toggleColorSelector() {\r\n        const newval = !this.state.isColorSelectorOn;\r\n        this.setState(state => ({\r\n            isColorSelectorOn: newval\r\n        }));\r\n\r\n        this.turnOffOtherTools(\"color\");\r\n    }\r\n\r\n    toggleFill() {\r\n        const newval = !this.state.isFillOn;\r\n        this.setState(state => ({\r\n            isFillOn: newval\r\n        }));\r\n\r\n        this.turnOffOtherTools(\"fill\");\r\n    }\r\n\r\n    turnOffOtherTools(skip) {\r\n        if (this.state.isEraserOn && skip !== 'eraser') {\r\n            this.toggleEraser();\r\n        }\r\n\r\n        if (this.state.isFillOn && skip !== 'fill') {\r\n            this.toggleFill();\r\n        }\r\n\r\n        if (this.state.isColorSelectorOn && skip !== 'color') {\r\n            this.toggleColorSelector();\r\n        }\r\n    }\r\n\r\n    shufflePolyominos() {\r\n        let shuffledPolyominos = polyominos;\r\n        let currentIndex = shuffledPolyominos.length, tempValue, randomIndex;\r\n\r\n        while (0 !== currentIndex) {\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex -= 1;\r\n\r\n            tempValue = shuffledPolyominos[currentIndex];\r\n            shuffledPolyominos[currentIndex] = shuffledPolyominos[randomIndex];\r\n            shuffledPolyominos[randomIndex] = tempValue;\r\n        }\r\n\r\n        return shuffledPolyominos;\r\n    }\r\n\r\n    newImage() {\r\n        this.resetCanvas();\r\n    }\r\n\r\n    resetCanvas() {\r\n        this.setState(state => ({\r\n            canvas: {},\r\n            canvasHistory: [{}],\r\n            canvasStep: 0\r\n        }));\r\n    }\r\n\r\n    changeMyImages(images) {\r\n        this.setState(state => ({\r\n            myimages: images\r\n        }));\r\n    }\r\n\r\n    changeMyImageOp(op) {\r\n        this.setState(state => ({\r\n            myimageop: op\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Crudbar>\r\n                    Polyomino Painter\r\n                </Crudbar>\r\n                <WorkspaceDiv>\r\n                    <BrushControls \r\n                        currentPrimaryColor={this.state.primaryColor}\r\n                        currentPolyo={this.state.currentPolyo}\r\n                        currentUserPolyoId={this.state.currentUserPolyoId}\r\n                        canvas={this.state.canvas}\r\n                        isEraserOn={this.state.isEraserOn}\r\n                        isColorSelectorOn={this.state.isColorSelectorOn}\r\n                        isFillOn={this.state.isFillOn}\r\n                        polyoList={this.state.polyoList}\r\n                        selectablePolyos={this.state.selectablePolyos}\r\n                        onPrimaryColorChange={this.changePrimaryColor}\r\n                        onCanvasChange={this.changeCanvas}\r\n                        onPolyoChange={this.changePolyo}\r\n                        onPolyoChangeByName={this.changePolyoByName}\r\n                        onToggleEraser={this.toggleEraser}\r\n                        onToggleColorSelector={this.toggleColorSelector}\r\n                        onToggleFill={this.toggleFill}\r\n                        onUndoPolyo={this.changePolyoHistory}\r\n                        onUserPolyoChange={this.changeUserPolyo}\r\n                        onRedoPolyo={this.changePolyoHistory}\r\n                        matIconSize={this.state.matIconSize}\r\n                        previewSquareWidth={this.state.previewSquareWidth}\r\n                        previewSquareHeight={this.state.previewSquareHeight}\r\n                    />\r\n                    <Board \r\n                        currentPrimaryColor={this.state.primaryColor}\r\n                        currentPolyo={this.state.currentPolyo}\r\n                        canvas={this.state.canvas}\r\n                        isEraserOn={this.state.isEraserOn}\r\n                        isColorSelectorOn={this.state.isColorSelectorOn}\r\n                        isFillOn={this.state.isFillOn}\r\n                        onPrimaryColorChange={this.changePrimaryColor}\r\n                        onCanvasChange={this.changeCanvas}\r\n                        onToggleColorSelector={this.toggleColorSelector}\r\n                        matIconSize={this.state.matIconSize}\r\n                        onBoardSizeChange={this.changeBoardSize}\r\n                        onUndoCanvas={this.changeSquaresHistory}\r\n                        onRedoCanvas={this.changeSquaresHistory}\r\n                        squareWidth={this.state.canvasSquareWidth}\r\n                        squareHeight={this.state.canvasSquareHeight}\r\n                        boardX={this.state.xSquares}\r\n                        boardY={this.state.ySquares}\r\n                    />\r\n                    <ImagePreview \r\n                        canvas={this.state.canvas}\r\n                        boardX={this.state.xSquares}\r\n                        boardY={this.state.ySquares}\r\n                        myimages={this.state.myimages}\r\n                        myimageop={this.state.myimageop}\r\n                        onCanvasChange={this.changeCanvas}\r\n                        onMyImageOpChange={this.changeMyImageOp}\r\n                    />\r\n                </WorkspaceDiv>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nimport Workspace from \"./components/workspace.component\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <Router>\r\n      <Route path=\"/\" component={Workspace} />\r\n    </Router>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// todo - learn more about these wonderful workers...\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}